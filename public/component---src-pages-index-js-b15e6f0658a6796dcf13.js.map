{"version":3,"sources":["webpack://v1/./src/pages/index.js","webpack://v1/./src/components/sections/education.js"],"names":["StyledMainContainer","styled","theme","mixins","link","isActive","flexCenter","activeTabId","fancyList","location","className"],"mappings":"yKAOMA,G,sCCEoBC,wBAAH,wEAAGA,CAAH,8HAiBDA,oBAAH,oEAAGA,CAAH,ygBA0CKA,uBAAH,sEAAGA,CAAH,qfACjB,qBAAGC,MAAkBC,OAAOC,QAQrB,qBAAGC,SAA2B,eAAiB,kBAUpD,qBAAGH,MAAkBC,OAAOG,cAcVL,oBAAH,sEAAGA,CAAH,ieASU,qBAAGM,eAWD,qBAAGA,eAOZN,oBAAH,sEAAGA,CAAH,4FAUEA,oBAAH,qEAAGA,CAAH,yQAMd,qBAAGC,MAAkBC,OAAOK,aDzINP,qBAAH,sEAAGA,CAAH,6BAqBzB,EAjBkB,SAAC,GAAD,IAAGQ,EAAH,EAAGA,SAAH,OAChB,gBAAC,KAAD,CAAQA,SAAUA,GAChB,gBAACT,EAAD,CAAqBU,UAAU,cAC7B,gBAAC,KAAD,MACA,gBAAC,KAAD,MACA,gBAAC,KAAD,MACA,gBAAC,KAAD,MACA,gBAAC,KAAD,MACA,gBAAC,KAAD","file":"component---src-pages-index-js-b15e6f0658a6796dcf13.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { Layout, Hero, About, Jobs, Featured, Projects, Contact } from '@components';\nimport Education from '../components/sections/education';\nimport { hot } from 'react-hot-loader/root';\n\nconst StyledMainContainer = styled.main`\n  counter-reset: section;\n`;\n\nconst IndexPage = ({ location }) => (\n  <Layout location={location}>\n    <StyledMainContainer className=\"fillHeight\">\n      <Hero />\n      <About />\n      <Jobs />\n      <Featured />\n      <Projects />\n      <Contact />\n    </StyledMainContainer>\n  </Layout>\n);\n\nIndexPage.propTypes = {\n  location: PropTypes.object.isRequired,\n};\n\nexport default hot(IndexPage);\n","import React, { useState, useEffect, useRef } from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { CSSTransition } from 'react-transition-group';\nimport styled from 'styled-components';\nimport { srConfig } from '@config';\nimport { KEY_CODES } from '@utils';\nimport sr from '@utils/sr';\nimport { usePrefersReducedMotion } from '@hooks';\n\nconst StyledJobsSection = styled.section`\n  max-width: 700px;\n\n  .inner {\n    display: flex;\n\n    @media (max-width: 650px) {\n      display: block;\n    }\n\n    // Prevent container from jumping\n    @media (min-width: 700px) {\n      min-height: 340px;\n    }\n  }\n`;\n\nconst StyledTabList = styled.div`\n  position: relative;\n  z-index: 3;\n  width: max-content;\n  padding: 0;\n  margin: 0;\n  list-style: none;\n\n  @media (max-width: 600px) {\n    display: flex;\n    overflow-x: auto;\n    width: calc(100% + 100px);\n    padding-left: 50px;\n    margin-left: -50px;\n    margin-bottom: 30px;\n  }\n  @media (max-width: 480px) {\n    width: calc(100% + 50px);\n    padding-left: 25px;\n    margin-left: -25px;\n  }\n\n  li {\n    &:first-of-type {\n      @media (max-width: 600px) {\n        margin-left: 50px;\n      }\n      @media (max-width: 480px) {\n        margin-left: 25px;\n      }\n    }\n    &:last-of-type {\n      @media (max-width: 600px) {\n        padding-right: 50px;\n      }\n      @media (max-width: 480px) {\n        padding-right: 25px;\n      }\n    }\n  }\n`;\n\nconst StyledTabButton = styled.button`\n  ${({ theme }) => theme.mixins.link};\n  display: flex;\n  align-items: center;\n  width: 100%;\n  height: var(--tab-height);\n  padding: 0 20px 2px;\n  border-left: 2px solid var(--lightest-navy);\n  background-color: transparent;\n  color: ${({ isActive }) => (isActive ? 'var(--green)' : 'var(--slate)')};\n  font-family: var(--font-mono);\n  font-size: var(--fz-xs);\n  text-align: left;\n  white-space: nowrap;\n\n  @media (max-width: 768px) {\n    padding: 0 15px 2px;\n  }\n  @media (max-width: 600px) {\n    ${({ theme }) => theme.mixins.flexCenter};\n    min-width: 120px;\n    padding: 0 15px;\n    border-left: 0;\n    border-bottom: 2px solid var(--lightest-navy);\n    text-align: center;\n  }\n\n  &:hover,\n  &:focus {\n    background-color: var(--light-navy);\n  }\n`;\n\nconst StyledHighlight = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 10;\n  width: 2px;\n  height: var(--tab-height);\n  border-radius: var(--border-radius);\n  background: var(--green);\n  transform: translateY(calc(${({ activeTabId }) => activeTabId} * var(--tab-height)));\n  transition: transform 0.25s cubic-bezier(0.645, 0.045, 0.355, 1);\n  transition-delay: 0.1s;\n\n  @media (max-width: 600px) {\n    top: auto;\n    bottom: 0;\n    width: 100%;\n    max-width: var(--tab-width);\n    height: 2px;\n    margin-left: 50px;\n    transform: translateX(calc(${({ activeTabId }) => activeTabId} * var(--tab-width)));\n  }\n  @media (max-width: 480px) {\n    margin-left: 25px;\n  }\n`;\n\nconst StyledTabPanels = styled.div`\n  position: relative;\n  width: 100%;\n  margin-left: 20px;\n\n  @media (max-width: 600px) {\n    margin-left: 0;\n  }\n`;\n\nconst StyledTabPanel = styled.div`\n  width: 100%;\n  height: auto;\n  padding: 10px 5px;\n\n  ul {\n    ${({ theme }) => theme.mixins.fancyList};\n  }\n\n  h3 {\n    margin-bottom: 2px;\n    font-size: var(--fz-xxl);\n    font-weight: 500;\n    line-height: 1.3;\n\n    .company {\n      color: var(--green);\n    }\n  }\n\n  .range {\n    margin-bottom: 25px;\n    color: var(--light-slate);\n    font-family: var(--font-mono);\n    font-size: var(--fz-xs);\n  }\n`;\n\nconst Education = () => {\n  const data = useStaticQuery(graphql`\n    query {\n      education: allMarkdownRemark(\n        filter: { fileAbsolutePath: { regex: \"/education/\" } }\n        sort: { fields: [frontmatter___date], order: DESC }\n      ) {\n        edges {\n          node {\n            frontmatter {\n              title\n              company\n              location\n              range\n              url\n            }\n            html\n          }\n        }\n      }\n    }\n  `);\n\n  const jobsData = data.education.edges;\n\n  const [activeTabId, setActiveTabId] = useState(0);\n  const [tabFocus, setTabFocus] = useState(null);\n  const tabs = useRef([]);\n  const revealContainer = useRef(null);\n  const prefersReducedMotion = usePrefersReducedMotion();\n\n  useEffect(() => {\n    if (prefersReducedMotion) {\n      return;\n    }\n\n    sr.reveal(revealContainer.current, srConfig());\n  }, []);\n\n  const focusTab = () => {\n    if (tabs.current[tabFocus]) {\n      tabs.current[tabFocus].focus();\n      return;\n    }\n    // If we're at the end, go to the start\n    if (tabFocus >= tabs.current.length) {\n      setTabFocus(0);\n    }\n    // If we're at the start, move to the end\n    if (tabFocus < 0) {\n      setTabFocus(tabs.current.length - 1);\n    }\n  };\n\n  // Only re-run the effect if tabFocus changes\n  useEffect(() => focusTab(), [tabFocus]);\n\n  // Focus on tabs when using up & down arrow keys\n  const onKeyDown = e => {\n    switch (e.key) {\n      case KEY_CODES.ARROW_UP: {\n        e.preventDefault();\n        setTabFocus(tabFocus - 1);\n        break;\n      }\n\n      case KEY_CODES.ARROW_DOWN: {\n        e.preventDefault();\n        setTabFocus(tabFocus + 1);\n        break;\n      }\n\n      default: {\n        break;\n      }\n    }\n  };\n\n  return (\n    <StyledJobsSection id=\"jobs\" ref={revealContainer}>\n      <h2 className=\"numbered-heading\">Work Experience</h2>\n\n      <div className=\"inner\">\n        <StyledTabList role=\"tablist\" aria-label=\"Job tabs\" onKeyDown={e => onKeyDown(e)}>\n          {jobsData &&\n            jobsData.map(({ node }, i) => {\n              const { company } = node.frontmatter;\n              return (\n                <StyledTabButton\n                  key={i}\n                  isActive={activeTabId === i}\n                  onClick={() => setActiveTabId(i)}\n                  ref={el => (tabs.current[i] = el)}\n                  id={`tab-${i}`}\n                  role=\"tab\"\n                  tabIndex={activeTabId === i ? '0' : '-1'}\n                  aria-selected={activeTabId === i ? true : false}\n                  aria-controls={`panel-${i}`}>\n                  <span>{company}</span>\n                </StyledTabButton>\n              );\n            })}\n          <StyledHighlight activeTabId={activeTabId} />\n        </StyledTabList>\n\n        <StyledTabPanels>\n          {jobsData &&\n            jobsData.map(({ node }, i) => {\n              const { frontmatter, html } = node;\n              const { title, url, company, range } = frontmatter;\n\n              return (\n                <CSSTransition key={i} in={activeTabId === i} timeout={100} classNames=\"fade\">\n                  <StyledTabPanel\n                    id={`panel-${i}`}\n                    role=\"tabpanel\"\n                    tabIndex={activeTabId === i ? '0' : '-1'}\n                    aria-labelledby={`tab-${i}`}\n                    aria-hidden={activeTabId !== i}\n                    hidden={activeTabId !== i}>\n                    <h3>\n                      <span>{title}</span>\n                      <span className=\"company\">\n                        &nbsp;@&nbsp;\n                        <a href={url} className=\"inline-link\">\n                          {company}\n                        </a>\n                      </span>\n                    </h3>\n\n                    <p className=\"range\">{range}</p>\n\n                    <div dangerouslySetInnerHTML={{ __html: html }} />\n                  </StyledTabPanel>\n                </CSSTransition>\n              );\n            })}\n        </StyledTabPanels>\n      </div>\n    </StyledJobsSection>\n  );\n};\n\nexport default Education;\n"],"sourceRoot":""}